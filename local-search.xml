<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基于LNMP环境自建树莓派Web服务器</title>
    <link href="/%E5%9F%BA%E4%BA%8ELNMP%E7%8E%AF%E5%A2%83%E8%87%AA%E5%BB%BA%E6%A0%91%E8%8E%93%E6%B4%BEWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/%E5%9F%BA%E4%BA%8ELNMP%E7%8E%AF%E5%A2%83%E8%87%AA%E5%BB%BA%E6%A0%91%E8%8E%93%E6%B4%BEWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>前段时间正在逛赞噢校园集市的时候，偶然发现一个帖子出二手<strong>RaspberryPi4B</strong>，价格也非常适中（指五折），欣喜之下收了这块九成新的板子。我在很早之前是有一块RaspberryPi3B的，但是由于当时专业知识不够，不知道能用树莓派干些什么，所以这块3B也一直放在柜子里吃灰（泪）。不过大一学习了Linux系统的相关知识之后，查阅资料发现有不少人用树莓派来<u>搭建个人服务器</u>，再加上4B性能方面相较于3B有了很大的提升，于是我尝试着在宿舍利用树莓派搭建一个私人小型服务器来供学习使用。</p><span id="more"></span><p>最开始我想利用树莓派搭建一个NAS私有云文件管理系统，不过想了想在宿舍其实用处不大，再加上树莓派的处理速度有限，很难有比较好的使用体验。后来我想到了<strong>目前搭建个人博客的云服务器</strong>，对于小型个人博客的部署树莓派完全能够升胜任，于是开始着手利用树莓派搭建一个Web服务器。</p><h2 id="树莓派">1. 树莓派</h2><p>截至目前（2023.11.17），树莓派已经发行到Raspberry Pi5（应该还在预售？），各大电商厂家都能够买到，<strong>4B</strong>的均价在<strong>￥400</strong>左右，<strong>3B</strong>的均价在<strong>￥300</strong>左右，此外树莓派还有其他如ZeroW型号。本文采用的是<strong>Raspberry Pi 4B</strong>。</p><blockquote><p>树莓派是RaspberryPi基金会用于教育使用的卡片式电脑，最初售价为$30左右，但是由于全球芯片危机，芯片半导体供应紧张限制了电子设备产业发展，在全球缺芯问题的影响下于2021年首次涨价，不过近几年树莓派的价格趋于平缓。</p></blockquote><p>树莓派本身继承很多个人电脑的特点，将所有的元件集成到一块基于ARM的微型电脑主板上，具备所有PC的基本功能。目前开发者已经推出了适用于树莓派的Linux、Windows系统，只要你有一张烧录好的TF卡，就能随时开启属于你的个人电脑！（不过是只有电路板的电脑罢了）树莓派的功耗非常小，在满载的状态下测试一年电费才￥30左右，所以不用担心树莓派一直开着耗电的问题。</p><p>本事所搭建的服务器采用<strong><em>Ubuntu Server for RaspberryPi</em></strong>系统，所以在阅读本文的时候，最好有一点Linux操作系统的知识哦。</p><p>在正式开始搭建服务器，<strong>请准备好以下几件东西：</strong></p><ul><li><strong>Raspberry Pi电路板</strong></li><li><strong>TF卡（内存够用就行）</strong></li><li><strong>读卡器</strong></li><li><strong>个人Windows电脑</strong></li><li><strong>电源线</strong></li></ul><h2 id="ubuntu-server">2. Ubuntu Server</h2><h3 id="下载镜像文件">2. 1 下载镜像文件</h3><p>众所周知，Linux操作系统起源于Unix操作系统，有很多版本可以选择，而<strong>Ubuntu</strong>是目前受众面最广的版本。Ubuntu的开发者专门开发了适用于树莓派的<strong><em>UbuntuServer for Rapberry Pi</em></strong>系统，现在请前往 <ahref="https://ubuntu.com/download/raspberry-pi">Install Ubuntu on aRaspberry Pi</a> 下载操作系统</p><figure><img src="/img/基于LNMP环境自建树莓派Web服务器/ubuntuserver.jpg"alt="找到并选择图中红框内的下载" /><figcaption aria-hidden="true">找到并选择图中红框内的下载</figcaption></figure><p>由于本文将在终端中进行而不会用到图形化界面，为了节约TF卡里少量的空间请选择Server版本而不要下载Desktop版本。下载结束之后，你应该会得到类似于<code>ubuntu-22.04.3-preinstalled-server-arm64+raspi.img.xz</code>文件名的镜像文件。</p><h3 id="格式化tf卡">2. 2 格式化TF卡</h3><blockquote><p>如果你熟练掌握如何烧录一个操作系统到一张TF卡上，请跳过这一步。</p><p>如果你不太清楚如何烧录且你的TF不是新的，<strong>请提前对TF卡上重要文件进行备份</strong>以免重要数据丢失。</p></blockquote><p>下载<strong>DiskGenius（磁盘格式化工具）</strong>，用读卡器将TF卡插入你的个人电脑，依次对TF卡进行【删除分区】-&gt;【新建分区】-&gt;【保存更改】-&gt;【格式化】。</p><p>下载<strong>Rufus（镜像烧录工具）</strong>，【设备】选择TF卡（名字应该是NO_LABEL），【镜像文件】选择刚刚下载的那个镜像文件，其余默认，点击【确认】等待烧录完成。</p><h3 id="网络设置">2. 3 网络设置</h3><h4 id="有显示屏">2. 3. 1 有显示屏</h4><p>如果你有一块显示屏，那么连接到树莓派之后，将TF卡插入树莓派中，屏幕上应该会显示让你输入密码，默认初始密码为<code>ubuntu</code>，输入完之后会让你更改密码。进入之后，在终端中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo -i<br>vi /etc/netplan/50-cloud-init.yaml<br></code></pre></td></tr></table></figure><p>进入配置文件后，修改成以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">network:</span><br>    <span class="hljs-attr">ethernets:</span><br>    <span class="hljs-attr">eth0:</span><br>    <span class="hljs-attr">dhcp4:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">optional:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">2</span><br>    <span class="hljs-attr">wifis:</span><br>    <span class="hljs-attr">wlan0:</span><br>    <span class="hljs-attr">dhcp4:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">optional:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">access-points:</span><br>    <span class="hljs-attr">&quot;your_wifi_name&quot;:</span><br>    <span class="hljs-attr">password:</span><br>    <span class="hljs-string">&quot;your_wifi_password&quot;</span><br></code></pre></td></tr></table></figure><p><strong>注意！<u>请严格检查缩进</u></strong>，有的是2格缩进，有的是4格缩进，请以自己文件里面的缩进为准。回到终端后输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> wpa_supplicant<br>systemctl start wpa_supplicant<br>netplan generate<br>systemctl daemon-reload<br>netplan apply<br></code></pre></td></tr></table></figure><h4 id="无显示屏">2. 3. 2 无显示屏</h4><p>如果你不幸没有一块显示屏，那么保持你的TF卡插在你的个人电脑上。上一步完成之后，可能会出现<strong>找不到磁盘</strong>的情况，应该是烧录的文件系统与Windows的文件系统不匹配。如果你的磁盘发生了丢失，但是电脑显示插入了这个设备，那么接下来的操作请在DiskGenius进行（DiskGenius中能识别烧录的文件系统）。</p><p>在TF卡中的<code>system-boot</code>下找到<code>network.conf</code></p><p>然后登录到路由器的内网管理系统中（TP-Link的应该是192.168.1.1，其他厂家请查看路由器后的地址），在管理页面找到一个用户名为【ubuntu】的用户</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo静态博客搭建（基础篇）</title>
    <link href="/Hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89/"/>
    <url>/Hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>如果你某一天有了一个<strong>搭建个人博客</strong>的想法，但是因为<u>资金不足</u>、<u>技术栈太浅</u>等原因导致难以从零开始搭建自己的网站，那么用<strong>Hexo</strong>搭建一个静态博客就是一个不错的选择！本站是也是一个基于Hexo搭建的个人博客，将我的搭建过程分享出来，供感兴趣的朋友参考。</p><p><span id="more"></span></p><h2 id="什么是hexo">1. 什么是Hexo？</h2><p>在搭建Hexo静态博客之前，先了解下什么是Hexo以及需要准备的前期工作。</p><p>Hexo是一个快速、简洁且高效的博客框架（<em>Official</em>），将个人博客部署到Github上，通过Markdown格式展现博客内容，相较于其他有后端的如Wordpress等，上手更快、更适合新手搭建博客。（由于只涉及到一些前端的内容，所以对后端不太熟悉也完全没有问题！）</p><p>在搭建博客之前，<strong>你需要准备好以下几个内容：</strong></p><ul><li>一台搭载Windows/Linux系统的电脑（如果你是Mac系统，建议查看<ahref="https://hexo.io/zh-cn/docs/">官方文档</a>，在这里就不进行赘述了）</li><li>能科学上网的工具</li><li>注册一个Github账号</li><li>熟悉Markdown的使用方法（不会其实也没问题，学习之后能更快上手博客文章的写作）</li></ul><p>准备好上面的东西之后，那让我们开始吧。</p><h2 id="安装hexo">2. 安装Hexo</h2><h3 id="准备工作">2. 1 准备工作</h3><p>在正式安装Hexo之前，<strong>确保你的电脑上面有安装有</strong>：</p><ul><li><a href="https://nodejs.org/">Nodejs</a></li><li><a href="https://git-scm.com/">Git</a></li></ul><p>Nodejs为JavaScript提供运行环境，Git用于将你的博客部署到Github上。</p><p>Windows用户可直接<strong>在官网上下载安装</strong>，Linux用户可以通过<strong>终端</strong>获取：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install nodejs<br>sudo apt-get install npm<br>sudo apt-get install git<br></code></pre></td></tr></table></figure><p>同时确保你的版本为最新版本，避免出现版本不兼容的问题。</p><h3 id="安装hexo-1">2. 2 安装Hexo</h3><p>打开终端，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>这个命令下载了Hexo部署博客的相关依赖，它提供了基本的部署生成工具，现在你可以使用这个工具来生成你的博客了。</p><p>此时你要创建一个<u>文件夹</u>用于在<strong>本地</strong>存储你的个人博客，在你想安装博客的目录下输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init XX<br></code></pre></td></tr></table></figure><p>上面<code>XX</code>的部分填写任何名字均可（就是你能找到你部署博客的名字），然后在这个目录下就会生成一个新的名为<code>XX</code>的文件夹，进入该文件夹，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br></code></pre></td></tr></table></figure><p>安装依赖文件。至此，一个简单的博客就搭建完成了。</p><p>搭建好博客之后，该怎么查看在网页上的效果呢？Hexo官方给了几个很简单的命令，帮助你更快上手Hexo博客搭建部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean <span class="hljs-comment"># 清理缓存和静态文件</span><br>hexo new [layout] &lt;title&gt; <span class="hljs-comment"># 生成新的文章</span><br>hexo generate <span class="hljs-comment"># 简记为 hexo g, 生成博客的静态文件</span><br>hexo server <span class="hljs-comment"># 简记为 hexo s, 启动本地服务器（查看部署到网页的效果）</span><br>hexo deploy <span class="hljs-comment"># 简记为 hexo d, 部署到网页</span><br></code></pre></td></tr></table></figure><p>更多命令请参考<ahref="https://hexo.io/zh-cn/docs/">官方文档</a>。现在，在这个文件夹打开的终端中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p>等待一会儿直到你看到类似如下的图片：</p><figure><img src="/img/Hexo静态博客搭建（基础篇）/hexo初始化.png"alt="这是你看到的内容" /><figcaption aria-hidden="true">这是你看到的内容</figcaption></figure><p>然后在浏览器的搜索框中输入<code>localhost:4000</code>，就可以看到你部署的博客在网页中的样子了。如果你想退出预览，那么在刚才的终端页面中按下键盘上的<strong><em>Ctrl+C</em></strong> 即可退出本地预览。</p><h2 id="部署到github">3. 部署到Github</h2><h3 id="遇到的问题">3. 1 遇到的问题</h3><p>在退出本地预览之后，再次访问<code>localhost:4000</code>，发现居然无法访问了。可恶，搭建好的博客关掉本地服务器之后就不能再看了，有没有什么办法能让我通过网页直接浏览呢？答案是<strong>把网页部署到Github上</strong>。</p><p>Hexo生成静态博客的实质是生成了<strong>静态网页文件</strong>，然后通过访问这些网页文件达到浏览博客的效果。Github作为全球最大的代码托管平台，将本地的文件部署Github上，再通过Github提供的网址访问，就能直接在网页上浏览你的博客了。当然你也可以选择购买一台云服务器直接部署到你的云服务器上，不过博主手头比较紧辣，所以还是选择Free的Github吧。</p><h3 id="创建仓库">3. 2 创建仓库</h3><p>登陆到Github之后（如果登陆不上Github，建议检查是否缺少相应的条件），点击右上角的+ 号，再点击<code>New repository</code>：</p><figure><img src="/img/Hexo静态博客搭建（基础篇）/hexo%20repo1.png"alt="这时你会看到的界面" /><figcaption aria-hidden="true">这时你会看到的界面</figcaption></figure><p>进去之后，将这个仓库的名字改为 <code>XX.github.io</code>，其中<code>XX</code>为你的用户名（记住，一定要为你的<strong>用户名</strong>不是昵称！）：</p><figure><img src="/img/Hexo静态博客搭建（基础篇）/hexo%20repo2.png"alt="这时你会看到的界面" /><figcaption aria-hidden="true">这时你会看到的界面</figcaption></figure><p>然后其他选项保持默认即可（注意下方是否选择了<strong><em>Public</em></strong> 选项以免不能通过网址访问）</p><h3 id="生成本地ssh">3. 3 生成本地SSH</h3><p>SSH是一种<strong>网络协议</strong>，让我们能够安全地登陆到Github上，有效防止远程管理过程中的信息泄露问题。其具体的实现过程如下：</p><ul><li>远程主机收到来自你电脑的登陆请求，将主机存储的SSH公钥与你电脑发送的<strong>公钥</strong>进行比对。</li><li>若公钥一致，主机将用你电脑发送的公钥加密“质询”(Challenge)并将加密内容返回你的电脑。</li><li>你的电脑用本地一并生成的<strong>私钥</strong>对”质询“进行解密并把解密内容发送给远程主机。</li><li>若解密内容一致，则允许登陆。</li></ul><p>让我们我们先在本地生成<strong>SSH秘钥</strong>。在你博客文件夹下打开终端，在终端中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;username&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;useremail&quot;</span><br></code></pre></td></tr></table></figure><p>其中<code>username</code>换成你Github的用户名，<code>useremail</code>换成你注册Github所用的邮箱。可以用以下两条命令检查是否填写正确：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config user.name<br>git config user.email<br></code></pre></td></tr></table></figure><p>接下来创建SSH秘钥，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;useremail&quot;</span><br></code></pre></td></tr></table></figure><p>一直回车，直到它告诉你已经生成了SSH密钥秘钥，打开它所给的文件夹：</p><figure><img src="/img/Hexo静态博客搭建（基础篇）/ssh1.png"alt="这时你会看到的界面" /><figcaption aria-hidden="true">这时你会看到的界面</figcaption></figure><p>其中，<code>id_rsa</code>是你这台电脑的私人秘钥，<code>id_rsa.pub</code>是公共秘钥，我们要用的就是<code>id_rsa.pub</code>。选择用记事本的形式打开<code>id_rsa.pub</code>，其中的内容就是我们要的公钥。</p><h3 id="github创建ssh-key">3. 4 Github创建SSH Key</h3><p>点击Github的头像，找到下方的<code>Settings</code>，在<code>Settings</code>中找到<code>SSH and GPG key</code>，也可以直接点击<ahref="https://github.com/settings/keys">链接</a>，然后点击<code>New SSH key</code></p><figure><img src="/img/Hexo静态博客搭建（基础篇）/ssh2.png"alt="这时你会看到的界面" /><figcaption aria-hidden="true">这时你会看到的界面</figcaption></figure><p><code>Title</code>随便取，<code>Key type</code>保持默认<code>Authentication key</code>，然后在<code>Key</code>中填入你上面生成的公共秘钥<code>id_rsa.pub</code>中的内容：</p><figure><img src="/img/Hexo静态博客搭建（基础篇）/ssh3.png"alt="这时你会看到的界面" /><figcaption aria-hidden="true">这时你会看到的界面</figcaption></figure><p>输入完成之后点下<code>Add SSH key</code>。</p><p>回到之前的终端，在终端中输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>如出现如下的界面则创建SSH密钥成功：</p><figure><img src="/img/Hexo静态博客搭建（基础篇）/ssh4.png"alt="这时你会看到的界面" /><figcaption aria-hidden="true">这时你会看到的界面</figcaption></figure><blockquote><p>最新产生的问题：如果你在校园网环境下可能会失败，因为部分校园网会屏蔽SSH端口（比如我们学校的校园网会时常抽风）</p><p>解决方案：换成手机流量就可以了</p></blockquote><h3 id="配置_config.yml">3. 5 配置<code>_config.yml</code></h3><blockquote><p>2023.10.22更新：由于博主校园网持续屏蔽SSH端口，故放弃SSH的方法，改用HTTPS进行链接。</p></blockquote><p>在你的博客文件夹主目录下的<code>_config.yml</code>是Hexo的配置文件，用记事本打开后可以根据注释按照你的情况对其进行修改。现在我们需要配置最下面的<code>deploy</code>选项，根据你的情况按照下面的格式进行填写：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">deploy:<br>  type: git<br>  repo: https://github.com/usergithubname/usergithubname.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure><p>其中<code>repo</code>选择Github仓库中的HTTPS中的链接，即：</p><figure><img src="/img/Hexo静态博客搭建（基础篇）/config1.png"alt="这时你会看到的界面" /><figcaption aria-hidden="true">这时你会看到的界面</figcaption></figure><p>至此，部署到Github上的准备工作已经完成。</p><h3 id="部署到github-1">3. 6 部署到Github</h3><p>在部署之前，你需要下载一个部署插件才能使用<code>hexo d</code>，在终端中输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>等待完成后，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><p>当你看到如下的界面时，你的部署就大功告成！</p><figure><img src="/img/Hexo静态博客搭建（基础篇）/config2.png"alt="这时你会看到的界面" /><figcaption aria-hidden="true">这时你会看到的界面</figcaption></figure><p>此时你的博客已经部署到Github的仓库中了，你可以在浏览器中输入<code>https://usergithubname.github.io/</code>来访问你的博客啦。这里<code>usergithubname</code>还是填你Github的用户名。</p><h2 id="设置个人域名">4. 设置个人域名</h2><h3 id="一点准备">4. 1 一点准备</h3><p>在部署中就会遇到一个问题，那就是如果关掉科学上网的工具，那网站就很难再访问了。但是如果我们想让没有科学上网工具的人也能浏览我们的博客应该怎么办呢？答案是<strong>设置个人域名</strong>。</p><p>我们在浏览器中输入<code>https://usergithubname.github.io/</code>打开我们的博客的时候，其中经历了三个步骤：</p><ul><li>浏览器根据域名向DNS服务器发送请求</li><li>DNS将域名解析到对应的IP地址</li><li>根据Http请求将网络路由接到对应IP地址的服务器</li></ul><p>本质上我们访问网站其实是访问网站的<strong>IP地址</strong>，域名只是起到一个“别名”的作用，域名和IP地址是<strong>键值对</strong>的关系。不过其实IP地址是一直在变化的，所以域名还能提供一个相对固定的访问地址。你的<code>https://usergithubname.github.io/</code>其实是<code>github.io</code>的二级域名，由于Github的服务器在国外所以访问速度会慢很多（<del>本着网线接的越长访问速度越慢的原理</del>）。那我们的域名是怎样加快访问速度的呢？</p><p>这里我们就要谈到<strong>CDN（内容分布网络）</strong>，它加快网络访问速度的原理其实很简单：由于我们的博客是静态资源，如果我们的博客在附近被访问过一次，那么本地的DNS服务器对应IP中就会有博客的缓存，当其他临近用户再次访问这个网站时，就能直接从最近的DNS服务器的缓存中访问了，大大提升了访问速度。</p><h3 id="域名申请">4. 2 域名申请</h3><p>免费域名申请有很多，比较流行的有<em>eu.org</em>，详情可以参考其他的博客（它是一个二级域名再加上我的还没有审批下来所以有点介意啦）</p><p>付费顶级域名在国内外的互联网大厂都能买到，我的域名 <em>.top</em>在阿里云购买的，首年￥9，次年￥29，对于学生党还是很友好了。</p><p>申请的具体过程就不赘述了，在申请的时候会有对应的提示，可以按照提示进行申请。</p><h3 id="域名设置">4. 3 域名设置</h3><p>首先打开终端，在终端中输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping usergithubname.github.io<br></code></pre></td></tr></table></figure><p>在这个位置会显示你的博客IP地址：</p><figure><img src="/img/Hexo静态博客搭建（基础篇）/domain1.png"alt="这时你会看到的界面" /><figcaption aria-hidden="true">这时你会看到的界面</figcaption></figure><p>然后在你DNS解析商处打开你的域名管理，在DNS解析处添加两条记录：<strong>A</strong>和<strong>CNAME</strong></p><table><thead><tr class="header"><th style="text-align: center;">类型</th><th style="text-align: center;">名称</th><th style="text-align: center;">内容</th><th style="text-align: center;">TTL</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">A</td><td style="text-align: center;">@</td><td style="text-align: center;">[你刚才ping出来的IP地址]</td><td style="text-align: center;">自动/10min</td></tr><tr class="even"><td style="text-align: center;">CNAME</td><td style="text-align: center;">www</td><td style="text-align: center;">usergithubname.github.io</td><td style="text-align: center;">自动/10min</td></tr></tbody></table><p>这样确保你的DNS解析商知道你的域名是指向哪里（由于DNS缓存的原因要过上一小段时间才能更新，所以添加完还不能立马访问哦）</p><p>然后打开Github中你部署博客的仓库，在仓库上方找到<code>Settings</code>，打开后在左侧找到<code>Pages</code>，在里面找到<code>Custom domain</code>，并把你<strong>申请的域名</strong>添加到里面，记得勾选下面的<code>Enforce HTTPS</code>：</p><figure><img src="/img/Hexo静态博客搭建（基础篇）/domain2.png"alt="这时你会看到的界面" /><figcaption aria-hidden="true">这时你会看到的界面</figcaption></figure><p>然后在你的本地部署博客文件夹的主目录中找到<code>source</code>文件夹，在<code>source</code>文件夹下新建文本文档并命名为<code>CNAME.txt</code>，用记事本打开后输入<strong>你申请的域名</strong>，保存退出，然后删掉这个文件<code>CNAME.txt</code>的后缀<code>.txt</code>。</p><p>最后重新部署下你的博客：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g -d<br></code></pre></td></tr></table></figure><p>上面这个命令可以在生成之后立即部署，然后你就可以用自己的域名进行访问啦。</p><blockquote><p>建议每次部署之前都进行上面的操作。</p></blockquote><h2 id="总结">5. 总结</h2><p>至此，一个可以通过互联网快速访问、可以任你创造的博客就创建好了。不过你要走的路还很长，包括网站的基础设置、网站主题的更换，评论系统、访问统计、SEO等等，这些都是为了让你的博客更好看、让别人能更好的浏览。说来我搭建博客也没多长时间，我要学的东西也有很多，之后我也会继续更新，努力把自己的博客建的更好。</p><p>感谢你的阅读！</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
